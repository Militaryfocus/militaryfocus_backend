"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""
import asyncio
import signal
import sys
from django.core.management.base import BaseCommand
from scrape_content_application.advanced_scheduler import AdaptiveScheduler


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--max-concurrent',
            type=int,
            default=3,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)',
        )
        parser.add_argument(
            '--status-interval',
            type=int,
            default=300,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)',
        )
        parser.add_argument(
            '--save-state-interval',
            type=int,
            default=600,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...')
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.stdout.write(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        self.stdout.write(f"   –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {options['max_concurrent']}")
        self.stdout.write(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ç–∞—Ç—É—Å–∞: {options['status_interval']}—Å")
        self.stdout.write(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {options['save_state_interval']}—Å")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = AdaptiveScheduler()
        scheduler.max_concurrent_tasks = options['max_concurrent']
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            self.stdout.write(
                self.style.WARNING('\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
            )
            scheduler.is_running = False
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            asyncio.run(self.run_scheduler_with_monitoring(scheduler, options))
            
        except KeyboardInterrupt:
            self.stdout.write(
                self.style.WARNING('‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}')
            )
            raise

    async def run_scheduler_with_monitoring(self, scheduler, options):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_task = asyncio.create_task(scheduler.run())
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_task = asyncio.create_task(
            self.monitor_scheduler(scheduler, options['status_interval'])
        )
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [scheduler_task, monitoring_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}')
            )
            scheduler.is_running = False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            try:
                await scheduler_task
            except:
                pass

    async def monitor_scheduler(self, scheduler, status_interval):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        
        self.stdout.write(
            self.style.SUCCESS('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω')
        )
        
        while scheduler.is_running:
            try:
                await asyncio.sleep(status_interval)
                
                if scheduler.is_running:
                    status = scheduler.get_scheduler_status()
                    self.display_scheduler_status(status)
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}')
                )

    def display_scheduler_status(self, status):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        
        self.stdout.write('\n' + '='*60)
        self.stdout.write(
            self.style.HTTP_INFO(f'üìä –°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ({status["uptime_hours"]:.1f}—á —Ä–∞–±–æ—Ç—ã)')
        )
        self.stdout.write('='*60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        running_status = self.style.SUCCESS('üü¢ –†–ê–ë–û–¢–ê–ï–¢') if status['is_running'] else self.style.ERROR('üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù')
        self.stdout.write(f"–°—Ç–∞—Ç—É—Å: {running_status}")
        self.stdout.write(f"üì∞ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {status['total_sources']}")
        self.stdout.write(f"‚è≥ –ì–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–ø—É—Å–∫—É: {status['ready_tasks']}")
        self.stdout.write(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å: {status['running_tasks']}/{status['max_concurrent']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = status['stats']
        self.stdout.write(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {stats['completed_tasks']}")
        self.stdout.write(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['failed_tasks']}")
        self.stdout.write(f"   üìÑ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {stats['total_articles_parsed']}")
        
        if stats['completed_tasks'] + stats['failed_tasks'] > 0:
            success_rate = (stats['completed_tasks'] / (stats['completed_tasks'] + stats['failed_tasks'])) * 100
            success_color = self.style.SUCCESS if success_rate > 80 else self.style.WARNING if success_rate > 50 else self.style.ERROR
            self.stdout.write(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_color(f'{success_rate:.1f}%')}")
        
        # –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏
        if status['next_tasks']:
            self.stdout.write(f"\n‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:")
            for i, task in enumerate(status['next_tasks'], 1):
                priority_color = {
                    'CRITICAL': self.style.ERROR,
                    'HIGH': self.style.WARNING,
                    'NORMAL': self.style.HTTP_INFO,
                    'LOW': self.style.HTTP_NOT_MODIFIED
                }.get(task['priority'], self.style.HTTP_INFO)
                
                failures_info = f" ({task['consecutive_failures']} –Ω–µ—É–¥–∞—á)" if task['consecutive_failures'] > 0 else ""
                
                self.stdout.write(
                    f"   {i}. {task['source_name']} - "
                    f"{priority_color(task['priority'])} - "
                    f"{task['next_run'][:19]}{failures_info}"
                )
        
        self.stdout.write('='*60)

    def display_final_stats(self, scheduler):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        status = scheduler.get_scheduler_status()
        
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê'))
        self.stdout.write('='*60)
        
        self.stdout.write(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime_hours']:.1f} —á–∞—Å–æ–≤")
        self.stdout.write(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['total_sources']}")
        
        stats = status['stats']
        self.stdout.write(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['completed_tasks']}")
        self.stdout.write(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['failed_tasks']}")
        self.stdout.write(f"üìÑ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {stats['total_articles_parsed']}")
        
        if status['uptime_hours'] > 0:
            articles_per_hour = stats['total_articles_parsed'] / status['uptime_hours']
            self.stdout.write(f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {articles_per_hour:.1f} —Å—Ç–∞—Ç–µ–π/—á–∞—Å")
        
        if stats['completed_tasks'] + stats['failed_tasks'] > 0:
            success_rate = (stats['completed_tasks'] / (stats['completed_tasks'] + stats['failed_tasks'])) * 100
            self.stdout.write(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        self.stdout.write('='*60)
        self.stdout.write(self.style.SUCCESS('‚ú® –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É'))