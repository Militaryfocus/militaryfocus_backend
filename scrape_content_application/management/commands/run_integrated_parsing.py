"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""
import asyncio
import json
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from scrape_content_application.integrated_parser import IntegratedContentProcessor
from scrape_content_application.models import ContentSource


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ü–∞—Ä—Å–∏–Ω–≥ -> –ò–ò -> –ê–Ω–∞–ª–∏–∑ -> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--source',
            type=str,
            help='ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞',
        )
        parser.add_argument(
            '--min-quality',
            type=float,
            default=60.0,
            help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60.0)',
        )
        parser.add_argument(
            '--min-uniqueness',
            type=float,
            default=70.0,
            help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 70.0)',
        )
        parser.add_argument(
            '--detailed-report',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–µ',
        )
        parser.add_argument(
            '--save-report',
            type=str,
            help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–æ–π...')
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.stdout.write(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        self.stdout.write(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {options['min_quality']}")
        self.stdout.write(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {options['min_uniqueness']}")
        self.stdout.write(f"   –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {'–î–∞' if options['detailed_report'] else '–ù–µ—Ç'}")
        self.stdout.write(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {'–î–∞' if options['dry_run'] else '–ù–µ—Ç'}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            result = asyncio.run(self.run_integrated_parsing(options))
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_results(result, options)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if options.get('save_report'):
                self.save_report(result, options['save_report'])
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
            )
            raise CommandError(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}')

    async def run_integrated_parsing(self, options):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        async with IntegratedContentProcessor() as processor:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
            processor.min_quality_score = options['min_quality']
            processor.min_uniqueness_score = options['min_uniqueness']
            
            if options.get('source'):
                # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                try:
                    if options['source'].isdigit():
                        source = await sync_to_async(ContentSource.objects.get)(id=int(options['source']))
                    else:
                        source = await sync_to_async(ContentSource.objects.get)(name__icontains=options['source'])
                    
                    self.stdout.write(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source.name}")
                    result = await processor.process_source_with_full_pipeline(source)
                    
                    return {
                        'status': 'success',
                        'total_sources': 1,
                        'total_found': result.get('articles_found', 0),
                        'total_saved': result.get('articles_saved', 0),
                        'total_rejected': result.get('articles_rejected', 0),
                        'success_rate': (result.get('articles_saved', 0) / max(1, result.get('articles_found', 0))) * 100,
                        'processing_stats': processor.get_processing_stats(),
                        'results': [{'source_name': source.name, 'result': result}]
                    }
                    
                except ContentSource.DoesNotExist:
                    raise CommandError(f'–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {options["source"]}')
            else:
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                return await processor.run_full_pipeline_for_all_sources()

    def display_results(self, result, options):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if result['status'] == 'warning':
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è  {result.get('message', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')}")
            )
            return

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('\n' + '='*80)
        self.stdout.write(self.style.SUCCESS('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê'))
        self.stdout.write('='*80)
        
        self.stdout.write(f"üèÅ –°—Ç–∞—Ç—É—Å: {self.style.SUCCESS('–ó–ê–í–ï–†–®–ï–ù–û') if result['status'] == 'success' else self.style.ERROR('–û–®–ò–ë–ö–ê')}")
        self.stdout.write(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('total_sources', 0)}")
        self.stdout.write(f"üìÑ –°—Ç–∞—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {result.get('total_found', 0)}")
        self.stdout.write(f"‚úÖ –°—Ç–∞—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.style.SUCCESS(str(result.get('total_saved', 0)))}")
        self.stdout.write(f"‚ùå –°—Ç–∞—Ç–µ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {self.style.WARNING(str(result.get('total_rejected', 0)))}")
        self.stdout.write(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {self.style.SUCCESS(f\"{result.get('success_rate', 0):.1f}%\")}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if 'processing_stats' in result:
            stats = result['processing_stats']
            self.stdout.write('\n' + '-'*60)
            self.stdout.write(self.style.SUCCESS('üîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò'))
            self.stdout.write('-'*60)
            
            if 'stats' in stats:
                s = stats['stats']
                self.stdout.write(f"üîÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {s.get('total_processed', 0)}")
                self.stdout.write(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {s.get('successful_saves', 0)}")
                self.stdout.write(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {s.get('duplicates_found', 0)}")
                self.stdout.write(f"üìâ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É: {s.get('low_quality_rejected', 0)}")
                self.stdout.write(f"ü§ñ –û—à–∏–±–∫–∏ –ò–ò: {s.get('ai_processing_failures', 0)}")
                self.stdout.write(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {s.get('total_processing_time', 0):.1f}—Å")
            
            self.stdout.write(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {stats.get('avg_processing_time', 0):.1f}—Å/—Å—Ç–∞—Ç—å—è")
            self.stdout.write(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get('success_rate', 0):.1f}%")
            self.stdout.write(f"‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: {stats.get('rejection_rate', 0):.1f}%")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        if options.get('detailed_report') and result.get('results'):
            self.stdout.write('\n' + '-'*60)
            self.stdout.write(self.style.SUCCESS('üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú'))
            self.stdout.write('-'*60)
            
            for source_result in result['results']:
                source_name = source_result['source_name']
                source_data = source_result['result']
                
                status_color = self.style.SUCCESS if source_data['status'] == 'success' else self.style.ERROR
                
                self.stdout.write(f"\nüì∞ {self.style.HTTP_INFO(source_name)}:")
                self.stdout.write(f"   –°—Ç–∞—Ç—É—Å: {status_color(source_data['status'].upper())}")
                self.stdout.write(f"   üìÑ –ù–∞–π–¥–µ–Ω–æ: {source_data.get('articles_found', 0)}")
                self.stdout.write(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {source_data.get('articles_saved', 0)}")
                self.stdout.write(f"   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {source_data.get('articles_rejected', 0)}")
                self.stdout.write(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {source_data.get('execution_time', 0):.1f}—Å")
                
                if 'quality_metrics' in source_data:
                    qm = source_data['quality_metrics']
                    self.stdout.write(f"   ‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {qm.get('avg_quality_score', 0):.1f}")
                    self.stdout.write(f"   üéØ –°—Ä–µ–¥–Ω—è—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {qm.get('avg_uniqueness_score', 0):.1f}")
                    self.stdout.write(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {qm.get('avg_processing_time', 0):.1f}—Å/—Å—Ç–∞—Ç—å—è")
                
                if source_data['status'] == 'error':
                    self.stdout.write(f"   üí• –û—à–∏–±–∫–∞: {self.style.ERROR(source_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
                if options.get('detailed_report') and 'processing_results' in source_data:
                    successful_articles = [r for r in source_data['processing_results'] if r.success]
                    rejected_articles = [r for r in source_data['processing_results'] if not r.success]
                    
                    if successful_articles:
                        self.stdout.write(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
                        for i, article in enumerate(successful_articles[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            self.stdout.write(f"      {i}. {article.processed_title[:60]}...")
                            self.stdout.write(f"         –ö–∞—á–µ—Å—Ç–≤–æ: {article.quality_score:.1f}, –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {article.uniqueness_score:.1f}")
                    
                    if rejected_articles:
                        self.stdout.write(f"   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
                        for i, article in enumerate(rejected_articles[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            self.stdout.write(f"      {i}. {article.original_title[:60]}...")
                            self.stdout.write(f"         –ü—Ä–∏—á–∏–Ω–∞: {article.error_message}")

        self.stdout.write('\n' + '='*80)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result.get('total_found', 0) > 0:
            success_rate = result.get('success_rate', 0)
            if success_rate < 30:
                self.stdout.write(self.style.ERROR('‚ö†Ô∏è  –ù–ò–ó–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –£–°–ü–ï–•–ê! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'))
                self.stdout.write('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏')
                self.stdout.write('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ò–ò –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
                self.stdout.write('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')
            elif success_rate > 80:
                self.stdout.write(self.style.SUCCESS('üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.'))
            else:
                self.stdout.write(self.style.WARNING('üìà –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.'))

    def save_report(self, result, filepath):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            report_data = {
                'timestamp': timezone.now().isoformat(),
                'summary': {
                    'status': result['status'],
                    'total_sources': result.get('total_sources', 0),
                    'total_found': result.get('total_found', 0),
                    'total_saved': result.get('total_saved', 0),
                    'total_rejected': result.get('total_rejected', 0),
                    'success_rate': result.get('success_rate', 0)
                },
                'processing_stats': result.get('processing_stats', {}),
                'sources': []
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            for source_result in result.get('results', []):
                source_data = {
                    'source_name': source_result['source_name'],
                    'status': source_result['result']['status'],
                    'articles_found': source_result['result'].get('articles_found', 0),
                    'articles_saved': source_result['result'].get('articles_saved', 0),
                    'articles_rejected': source_result['result'].get('articles_rejected', 0),
                    'execution_time': source_result['result'].get('execution_time', 0),
                    'quality_metrics': source_result['result'].get('quality_metrics', {}),
                    'error': source_result['result'].get('error', '')
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å—è—Ö (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
                if 'processing_results' in source_result['result']:
                    source_data['articles'] = []
                    for pr in source_result['result']['processing_results']:
                        article_info = {
                            'success': pr.success,
                            'original_title': pr.original_title,
                            'processed_title': pr.processed_title,
                            'quality_score': pr.quality_score,
                            'uniqueness_score': pr.uniqueness_score,
                            'categories': pr.categories,
                            'tags': pr.tags,
                            'is_duplicate': pr.is_duplicate,
                            'processing_time': pr.processing_time,
                            'error_message': pr.error_message
                        }
                        source_data['articles'].append(article_info)
                
                report_data['sources'].append(source_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            self.stdout.write(
                self.style.SUCCESS(f'üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filepath}')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}')
            )