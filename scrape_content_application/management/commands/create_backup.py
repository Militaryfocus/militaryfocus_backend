"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
"""
import asyncio
from django.core.management.base import BaseCommand
from scrape_content_application.backup_system import backup_manager, backup_scheduler


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å–∏—Å—Ç–µ–º—ã'

    def add_arguments(self, parser):
        parser.add_argument(
            '--type',
            type=str,
            default='full',
            choices=['full', 'database', 'media', 'config', 'logs'],
            help='–¢–∏–ø —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é full)',
        )
        parser.add_argument(
            '--list',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—ç–∫–∞–ø–æ–≤',
        )
        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã',
        )
        parser.add_argument(
            '--upload-s3',
            action='store_true',
            help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –±—ç–∫–∞–ø—ã –≤ S3 (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)',
        )

    def handle(self, *args, **options):
        if options['list']:
            self.list_backups()
        elif options['cleanup']:
            self.cleanup_backups()
        else:
            self.create_backup(options['type'])

    def create_backup(self, backup_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        self.stdout.write(
            self.style.SUCCESS(f'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–∏–ø–∞: {backup_type}')
        )
        
        try:
            if backup_type == 'full':
                result = backup_manager.create_full_backup()
            elif backup_type == 'database':
                backup_file = backup_manager.create_database_backup()
                result = {
                    'success': backup_file is not None,
                    'files': [{'type': 'database', 'path': str(backup_file)}] if backup_file else [],
                    'errors': [] if backup_file else ['–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö']
                }
            elif backup_type == 'media':
                backup_file = backup_manager.create_media_backup()
                result = {
                    'success': backup_file is not None,
                    'files': [{'type': 'media', 'path': str(backup_file)}] if backup_file else [],
                    'errors': [] if backup_file else ['–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤']
                }
            elif backup_type == 'config':
                backup_file = backup_manager.create_config_backup()
                result = {
                    'success': backup_file is not None,
                    'files': [{'type': 'config', 'path': str(backup_file)}] if backup_file else [],
                    'errors': [] if backup_file else ['–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏']
                }
            elif backup_type == 'logs':
                backup_file = backup_manager.create_logs_backup()
                result = {
                    'success': backup_file is not None,
                    'files': [{'type': 'logs', 'path': str(backup_file)}] if backup_file else [],
                    'errors': [] if backup_file else ['–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ª–æ–≥–æ–≤']
                }
            
            self.display_backup_result(result)
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
            )

    def list_backups(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:')
        )
        
        try:
            backups = backup_manager.get_backup_list()
            
            if not backups:
                self.stdout.write(
                    self.style.WARNING('–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
                )
                return
            
            for i, backup in enumerate(backups[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                timestamp = backup.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                success = backup.get('success', False)
                files_count = len(backup.get('files', []))
                
                status_icon = '‚úÖ' if success else '‚ùå'
                status_color = self.style.SUCCESS if success else self.style.ERROR
                
                self.stdout.write(f"\n{i}. {status_icon} {timestamp}")
                self.stdout.write(f"   –°—Ç–∞—Ç—É—Å: {status_color('–£—Å–ø–µ—à–Ω–æ' if success else '–° –æ—à–∏–±–∫–∞–º–∏')}")
                self.stdout.write(f"   –§–∞–π–ª–æ–≤: {files_count}")
                
                if backup.get('errors'):
                    self.stdout.write(f"   –û—à–∏–±–∫–∏: {'; '.join(backup['errors'][:2])}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                for file_info in backup.get('files', [])[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    size_mb = file_info.get('size', 0) / (1024 * 1024)
                    exists_icon = 'üìÅ' if file_info.get('exists', True) else '‚ùå'
                    self.stdout.write(f"   {exists_icon} {file_info.get('type', 'unknown')}: {size_mb:.1f}MB")
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}')
            )

    def cleanup_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...')
        )
        
        try:
            backup_manager.cleanup_old_backups()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}')
            )

    def display_backup_result(self, result):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"""
        if result['success']:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            )
            
            self.stdout.write(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            self.stdout.write(f"   –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result.get('files', []))}")
            
            total_size = 0
            for file_info in result.get('files', []):
                size_mb = file_info.get('size', 0) / (1024 * 1024)
                total_size += size_mb
                self.stdout.write(f"   üìÅ {file_info.get('type', 'unknown')}: {size_mb:.1f}MB")
            
            self.stdout.write(f"   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f}MB")
            
        else:
            self.stdout.write(
                self.style.ERROR('‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏')
            )
            
            if result.get('errors'):
                self.stdout.write(f"\nüö® –û—à–∏–±–∫–∏:")
                for error in result['errors']:
                    self.stdout.write(f"   ‚Ä¢ {error}")
            
            if result.get('files'):
                self.stdout.write(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file_info in result['files']:
                    size_mb = file_info.get('size', 0) / (1024 * 1024)
                    self.stdout.write(f"   üìÅ {file_info.get('type', 'unknown')}: {size_mb:.1f}MB")