#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
–ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""
import os
import sys
import asyncio
import django
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/workspace')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'war_site.settings')
django.setup()

from scrape_content_application.models import ContentSource, ArticleContent
from scrape_content_application.integrated_parser import IntegratedContentProcessor
from scrape_content_application.ai_content_processor import get_ai_processor
from scrape_content_application.content_analyzer import get_content_analyzer


async def test_ai_processor():
    """–¢–µ—Å—Ç –ò–ò –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    processor = get_ai_processor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    test_title = "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –≤–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ–ª–∏ —É—á–µ–Ω–∏—è"
    test_content = """
    –í—á–µ—Ä–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –ø—Ä–æ–≤–µ–ª–∏ –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –≤–æ–µ–Ω–Ω—ã–µ —É—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ.
    –í —É—á–µ–Ω–∏—è—Ö –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –±–æ–ª–µ–µ 1000 –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö –∏ 200 –µ–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏.
    –ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ—Ç–∏–ª–æ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞.
    """
    
    try:
        result = await processor.process_content(test_title, test_content)
        
        print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {test_title}")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {result.processed_title}")
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality.overall_score:.1f}")
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {result.quality.uniqueness_score:.1f}")
        print(f"‚úÖ –¢–µ–≥–∏: {', '.join(result.tags[:3])}")
        print(f"‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time:.1f}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return False


async def test_content_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    analyzer = get_content_analyzer()
    
    test_title = "–ù–æ–≤—ã–µ –≤–æ–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –†–æ—Å—Å–∏–∏"
    test_content = """
    –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã –≤–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π.
    –≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫.
    """
    test_link = "https://example.com/test-article"
    
    try:
        analysis = await analyzer.analyze_content(test_title, test_content, test_link)
        
        print(f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç: {'–î–∞' if analysis['duplicate_check']['is_duplicate'] else '–ù–µ—Ç'}")
        print(f"‚úÖ –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {analysis['quality_metrics']['overall_score']:.1f}")
        print(f"‚úÖ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {analysis['quality_metrics']['readability_score']:.1f}")
        print(f"‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {analysis['quality_metrics']['keyword_relevance']:.1f}")
        
        if analysis['categories']:
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat['category'] for cat in analysis['categories'][:2]])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False


async def test_integrated_processor():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    test_source, created = await sync_to_async(ContentSource.objects.get_or_create)(
        name="–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
        defaults={
            'description': '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            'source_link': 'https://example.com',
            'period': 6,
            'platform_type': 'news',
            'status': 'active',
            'is_enabled': True
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {test_source.name}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    test_article_data = {
        'title': '–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞—Ä–º–∏—è –ø–æ–ª—É—á–∏–ª–∞ –Ω–æ–≤–æ–µ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ',
        'content': '''
        –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–æ—Å—Å–∏–∏ —Å–æ–æ–±—â–∏–ª–æ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≤–æ–π—Å–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è.
        –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞—é—Ç –±–æ–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π.
        –í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö.
        –ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫.
        ''',
        'link': f'https://example.com/test-article-{int(datetime.now().timestamp())}',
        'image_url': None,
        'published_at': datetime.now()
    }
    
    try:
        async with IntegratedContentProcessor() as processor:
            # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            processor.min_quality_score = 30.0
            processor.min_uniqueness_score = 30.0
            
            result = await processor.process_article_content(test_article_data, test_source)
            
            print(f"‚úÖ –£—Å–ø–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'–î–∞' if result.success else '–ù–µ—Ç'}")
            
            if result.success:
                print(f"‚úÖ ID —Å—Ç–∞—Ç—å–∏: {result.article_id}")
                print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {result.original_title}")
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {result.processed_title}")
                print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality_score:.1f}")
                print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {result.uniqueness_score:.1f}")
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(result.categories[:2])}")
                print(f"‚úÖ –¢–µ–≥–∏: {', '.join(result.tags[:3])}")
                print(f"‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time:.1f}—Å")
            else:
                print(f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {result.error_message}")
                print(f"‚ùå –î—É–±–ª–∏–∫–∞—Ç: {'–î–∞' if result.is_duplicate else '–ù–µ—Ç'}")
        
        return result.success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return False


def print_system_info():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("="*80)
    print("üåü –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –° –ò–ò")
    print("="*80)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print("="*80)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_system_info()
    
    # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Django
    from asgiref.sync import sync_to_async
    globals()['sync_to_async'] = sync_to_async
    
    tests_results = []
    
    # –¢–µ—Å—Ç 1: –ò–ò –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    tests_results.append(await test_ai_processor())
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    tests_results.append(await test_content_analyzer())
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    tests_results.append(await test_integrated_processor())
    
    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    passed_tests = sum(tests_results)
    total_tests = len(tests_results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    print("="*80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        total_articles = await sync_to_async(ArticleContent.objects.count)()
        total_sources = await sync_to_async(ContentSource.objects.count)()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {total_articles}")
        print(f"   üåê –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}")
        
        if total_articles > 0:
            recent_articles = await sync_to_async(list)(
                ArticleContent.objects.order_by('-created_at')[:3]
            )
            print(f"   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:")
            for i, article in enumerate(recent_articles, 1):
                print(f"      {i}. {article.article_title[:50]}...")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print("="*80)


if __name__ == "__main__":
    asyncio.run(main())